Java Based Configuration :------- 

It is not all the time XML configuration . We can go for keeping the configuration information in
Java code also. So in that case we dont have to write the xml file.
https://www.tutorialspoint.com/spring/spring_java_based_configuration.htm


Dependency Injection (DI)
The technology that Spring is most identified with is the Dependency Injection (DI) flavor of Inversion of Control. The Inversion of Control (IoC) is a general concept, and it can be expressed in many different ways. Dependency Injection is merely one concrete example of Inversion of Control.

When writing a complex Java application, application classes should be as independent as possible of other Java classes to increase the possibility to reuse these classes and to test them independently of other classes while unit testing. Dependency Injection helps in gluing these classes together and at the same time keeping them independent.

What is dependency injection exactly? Let's look at these two words separately. Here the dependency part translates into an association between two classes. For example, class A is dependent of class B. Now, let's look at the second part, injection. All this means is, class B will get injected into class A by the IoC.

Dependency injection can happen in the way of passing parameters to the constructor or by post-construction using setter methods. As Dependency Injection is the heart of Spring Framework, we will explain this concept in a separate chapter with relevant example.
--------------------------------------------------------------------------------------------------------------

Aspect Oriented Programming (AOP)
One of the key components of Spring is the Aspect Oriented Programming (AOP) framework. The functions that span multiple points of an application are called cross-cutting concerns and these cross-cutting concerns are conceptually separate from the application's business logic. There are various common good examples of aspects including logging, declarative transactions, security, caching, etc.

The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity is the aspect. DI helps you decouple your application objects from each other, while AOP helps you decouple cross-cutting concerns from the objects that they affect.

The AOP module of Spring Framework provides an aspect-oriented programming implementation allowing you to define method-interceptors and pointcuts to cleanly decouple code that implements functionality that should be separated. 
---------------------------------------------------------------------------------------------------------------https://www.tutorialspoint.com/spring/aop_with_spring.htm

Let us plan for the target object related class.
Let us create a maven project and update pom.xml


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.cts.demo</groupId>
  <artifactId>aop</artifactId>
  <version>0.0.1-SNAPSHOT</version>
   <dependencies>
  <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.3.7</version>
</dependency>
   <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
<dependency>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectjweaver</artifactId>
    <version>1.9.6</version>
</dependency>
   
  </dependencies>
</project>

-----------------------------------------------------------------------------------------------


package com.cts.demos.model;
/* Target object

The object being advised by one or more aspects. 
This object will always be a proxied object, 
also referred to as the advised object.      */
public class Employee {
        private String id;
        private String name;
        private String desig;
		public String getId() {
			return id;
		}
		public void setId(String id) {
			this.id = id;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String getDesig() {
			return desig;
		}
		public void setDesig(String desig) {
			this.desig = desig;
		}
        
	   
}
----------------------------------------------------------------------------------------------------
What is AspectJ?
---------------------------------------------------------------------------------------------------------
Configuration related class  we are planning as we are not to write any xml file. 


package com.cts.demos.configuration;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;

@Configuration // Configuration class
@EnableAspectJAutoProxy // Let us enable auto proxy 
@ComponentScan("com.cts.demos")
public class ApplicationConfig {

}
----------------------------------------------------------------------------------------------------
@Bean
---------------------------------------------
Below are called as stereotyped annonations. It is specifically mentioning what kind of Bean we are making use of.

@Component
@Service
@Controller
@Repository

---------------------------------------------------------------------------------------------------------
Next we create an aspect. With the annotation @Aspect and again it is a component.
package com.cts.demos.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class Logger {

	// PointCut
	// PointCuts are mapped with an empty 
//	method which is having return type as void
  @Pointcut(value="execution  (* com.cts.demos.model.Employee.get*(..))")	
	public void match() {}
	
  
  
  // Advice 
    @Before("match()")
    public void beforeAdvice(JoinPoint joinPoint)
    {
         System.out.println("I am called before the get methods are called");  	
    }
}
----------------------------------------------------------------------------------------------------------------




